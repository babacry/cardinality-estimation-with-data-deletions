// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: theta_sketch_dup.proto

#include "theta_sketch_dup.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_theta_5fsketch_5fdup_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThetaSketchDup_HashMapCount_theta_5fsketch_5fdup_2eproto;
namespace datasketches_pb {
class ThetaSketchDup_HashMapCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThetaSketchDup_HashMapCount> _instance;
} _ThetaSketchDup_HashMapCount_default_instance_;
class ThetaSketchDupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThetaSketchDup> _instance;
} _ThetaSketchDup_default_instance_;
}  // namespace datasketches_pb
static void InitDefaultsscc_info_ThetaSketchDup_theta_5fsketch_5fdup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datasketches_pb::_ThetaSketchDup_default_instance_;
    new (ptr) ::datasketches_pb::ThetaSketchDup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datasketches_pb::ThetaSketchDup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ThetaSketchDup_theta_5fsketch_5fdup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ThetaSketchDup_theta_5fsketch_5fdup_2eproto}, {
      &scc_info_ThetaSketchDup_HashMapCount_theta_5fsketch_5fdup_2eproto.base,}};

static void InitDefaultsscc_info_ThetaSketchDup_HashMapCount_theta_5fsketch_5fdup_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::datasketches_pb::_ThetaSketchDup_HashMapCount_default_instance_;
    new (ptr) ::datasketches_pb::ThetaSketchDup_HashMapCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::datasketches_pb::ThetaSketchDup_HashMapCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThetaSketchDup_HashMapCount_theta_5fsketch_5fdup_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThetaSketchDup_HashMapCount_theta_5fsketch_5fdup_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_theta_5fsketch_5fdup_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_theta_5fsketch_5fdup_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_theta_5fsketch_5fdup_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_theta_5fsketch_5fdup_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup_HashMapCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup_HashMapCount, hash_val_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup_HashMapCount, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, preamble_longs_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, serial_version_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, sketch_type_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, rf_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, lg_nom_size_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, lg_cur_size_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, flags_byte_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, seed_hash_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, num_keys_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, p_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, theta_),
  PROTOBUF_FIELD_OFFSET(::datasketches_pb::ThetaSketchDup, keys_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::datasketches_pb::ThetaSketchDup_HashMapCount)},
  { 7, -1, sizeof(::datasketches_pb::ThetaSketchDup)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datasketches_pb::_ThetaSketchDup_HashMapCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::datasketches_pb::_ThetaSketchDup_default_instance_),
};

const char descriptor_table_protodef_theta_5fsketch_5fdup_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026theta_sketch_dup.proto\022\017datasketches_p"
  "b\"\313\002\n\016ThetaSketchDup\022\026\n\016preamble_longs\030\001"
  " \001(\r\022\026\n\016serial_version\030\002 \001(\r\022\023\n\013sketch_t"
  "ype\030\003 \001(\r\022\n\n\002rf\030\004 \001(\r\022\023\n\013lg_nom_size\030\005 \001"
  "(\r\022\023\n\013lg_cur_size\030\006 \001(\r\022\022\n\nflags_byte\030\007 "
  "\001(\r\022\021\n\tseed_hash\030\010 \001(\r\022\020\n\010num_keys\030\t \001(\r"
  "\022\t\n\001p\030\n \001(\001\022\r\n\005theta\030\013 \001(\004\022:\n\004keys\030\014 \003(\013"
  "2,.datasketches_pb.ThetaSketchDup.HashMa"
  "pCount\032/\n\014HashMapCount\022\020\n\010hash_val\030\001 \001(\004"
  "\022\r\n\005count\030\002 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_theta_5fsketch_5fdup_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_theta_5fsketch_5fdup_2eproto_sccs[2] = {
  &scc_info_ThetaSketchDup_theta_5fsketch_5fdup_2eproto.base,
  &scc_info_ThetaSketchDup_HashMapCount_theta_5fsketch_5fdup_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_theta_5fsketch_5fdup_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_theta_5fsketch_5fdup_2eproto = {
  false, false, descriptor_table_protodef_theta_5fsketch_5fdup_2eproto, "theta_sketch_dup.proto", 383,
  &descriptor_table_theta_5fsketch_5fdup_2eproto_once, descriptor_table_theta_5fsketch_5fdup_2eproto_sccs, descriptor_table_theta_5fsketch_5fdup_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_theta_5fsketch_5fdup_2eproto::offsets,
  file_level_metadata_theta_5fsketch_5fdup_2eproto, 2, file_level_enum_descriptors_theta_5fsketch_5fdup_2eproto, file_level_service_descriptors_theta_5fsketch_5fdup_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_theta_5fsketch_5fdup_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_theta_5fsketch_5fdup_2eproto)), true);
namespace datasketches_pb {

// ===================================================================

void ThetaSketchDup_HashMapCount::InitAsDefaultInstance() {
}
class ThetaSketchDup_HashMapCount::_Internal {
 public:
};

ThetaSketchDup_HashMapCount::ThetaSketchDup_HashMapCount(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:datasketches_pb.ThetaSketchDup.HashMapCount)
}
ThetaSketchDup_HashMapCount::ThetaSketchDup_HashMapCount(const ThetaSketchDup_HashMapCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&hash_val_, &from.hash_val_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&hash_val_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:datasketches_pb.ThetaSketchDup.HashMapCount)
}

void ThetaSketchDup_HashMapCount::SharedCtor() {
  ::memset(&hash_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&hash_val_)) + sizeof(count_));
}

ThetaSketchDup_HashMapCount::~ThetaSketchDup_HashMapCount() {
  // @@protoc_insertion_point(destructor:datasketches_pb.ThetaSketchDup.HashMapCount)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThetaSketchDup_HashMapCount::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThetaSketchDup_HashMapCount::ArenaDtor(void* object) {
  ThetaSketchDup_HashMapCount* _this = reinterpret_cast< ThetaSketchDup_HashMapCount* >(object);
  (void)_this;
}
void ThetaSketchDup_HashMapCount::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThetaSketchDup_HashMapCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThetaSketchDup_HashMapCount& ThetaSketchDup_HashMapCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThetaSketchDup_HashMapCount_theta_5fsketch_5fdup_2eproto.base);
  return *internal_default_instance();
}


void ThetaSketchDup_HashMapCount::Clear() {
// @@protoc_insertion_point(message_clear_start:datasketches_pb.ThetaSketchDup.HashMapCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hash_val_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&hash_val_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThetaSketchDup_HashMapCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 hash_val = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          hash_val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThetaSketchDup_HashMapCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datasketches_pb.ThetaSketchDup.HashMapCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 hash_val = 1;
  if (this->hash_val() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_hash_val(), target);
  }

  // int64 count = 2;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datasketches_pb.ThetaSketchDup.HashMapCount)
  return target;
}

size_t ThetaSketchDup_HashMapCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datasketches_pb.ThetaSketchDup.HashMapCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 hash_val = 1;
  if (this->hash_val() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_hash_val());
  }

  // int64 count = 2;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThetaSketchDup_HashMapCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datasketches_pb.ThetaSketchDup.HashMapCount)
  GOOGLE_DCHECK_NE(&from, this);
  const ThetaSketchDup_HashMapCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThetaSketchDup_HashMapCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datasketches_pb.ThetaSketchDup.HashMapCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datasketches_pb.ThetaSketchDup.HashMapCount)
    MergeFrom(*source);
  }
}

void ThetaSketchDup_HashMapCount::MergeFrom(const ThetaSketchDup_HashMapCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datasketches_pb.ThetaSketchDup.HashMapCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hash_val() != 0) {
    _internal_set_hash_val(from._internal_hash_val());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ThetaSketchDup_HashMapCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datasketches_pb.ThetaSketchDup.HashMapCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaSketchDup_HashMapCount::CopyFrom(const ThetaSketchDup_HashMapCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datasketches_pb.ThetaSketchDup.HashMapCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaSketchDup_HashMapCount::IsInitialized() const {
  return true;
}

void ThetaSketchDup_HashMapCount::InternalSwap(ThetaSketchDup_HashMapCount* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThetaSketchDup_HashMapCount, count_)
      + sizeof(ThetaSketchDup_HashMapCount::count_)
      - PROTOBUF_FIELD_OFFSET(ThetaSketchDup_HashMapCount, hash_val_)>(
          reinterpret_cast<char*>(&hash_val_),
          reinterpret_cast<char*>(&other->hash_val_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThetaSketchDup_HashMapCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThetaSketchDup::InitAsDefaultInstance() {
}
class ThetaSketchDup::_Internal {
 public:
};

ThetaSketchDup::ThetaSketchDup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  keys_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:datasketches_pb.ThetaSketchDup)
}
ThetaSketchDup::ThetaSketchDup(const ThetaSketchDup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&preamble_longs_, &from.preamble_longs_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_keys_) -
    reinterpret_cast<char*>(&preamble_longs_)) + sizeof(num_keys_));
  // @@protoc_insertion_point(copy_constructor:datasketches_pb.ThetaSketchDup)
}

void ThetaSketchDup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThetaSketchDup_theta_5fsketch_5fdup_2eproto.base);
  ::memset(&preamble_longs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_keys_) -
      reinterpret_cast<char*>(&preamble_longs_)) + sizeof(num_keys_));
}

ThetaSketchDup::~ThetaSketchDup() {
  // @@protoc_insertion_point(destructor:datasketches_pb.ThetaSketchDup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ThetaSketchDup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ThetaSketchDup::ArenaDtor(void* object) {
  ThetaSketchDup* _this = reinterpret_cast< ThetaSketchDup* >(object);
  (void)_this;
}
void ThetaSketchDup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThetaSketchDup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThetaSketchDup& ThetaSketchDup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThetaSketchDup_theta_5fsketch_5fdup_2eproto.base);
  return *internal_default_instance();
}


void ThetaSketchDup::Clear() {
// @@protoc_insertion_point(message_clear_start:datasketches_pb.ThetaSketchDup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  ::memset(&preamble_longs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_keys_) -
      reinterpret_cast<char*>(&preamble_longs_)) + sizeof(num_keys_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThetaSketchDup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 preamble_longs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preamble_longs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 serial_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          serial_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sketch_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sketch_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          rf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lg_nom_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          lg_nom_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 lg_cur_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          lg_cur_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 flags_byte = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          flags_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 seed_hash = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          seed_hash_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 num_keys = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          num_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double p = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          p_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 theta = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .datasketches_pb.ThetaSketchDup.HashMapCount keys = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_keys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThetaSketchDup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:datasketches_pb.ThetaSketchDup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 preamble_longs = 1;
  if (this->preamble_longs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_preamble_longs(), target);
  }

  // uint32 serial_version = 2;
  if (this->serial_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_serial_version(), target);
  }

  // uint32 sketch_type = 3;
  if (this->sketch_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sketch_type(), target);
  }

  // uint32 rf = 4;
  if (this->rf() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_rf(), target);
  }

  // uint32 lg_nom_size = 5;
  if (this->lg_nom_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_lg_nom_size(), target);
  }

  // uint32 lg_cur_size = 6;
  if (this->lg_cur_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_lg_cur_size(), target);
  }

  // uint32 flags_byte = 7;
  if (this->flags_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_flags_byte(), target);
  }

  // uint32 seed_hash = 8;
  if (this->seed_hash() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_seed_hash(), target);
  }

  // uint32 num_keys = 9;
  if (this->num_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_num_keys(), target);
  }

  // double p = 10;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_p(), target);
  }

  // uint64 theta = 11;
  if (this->theta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_theta(), target);
  }

  // repeated .datasketches_pb.ThetaSketchDup.HashMapCount keys = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_keys_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_keys(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:datasketches_pb.ThetaSketchDup)
  return target;
}

size_t ThetaSketchDup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:datasketches_pb.ThetaSketchDup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .datasketches_pb.ThetaSketchDup.HashMapCount keys = 12;
  total_size += 1UL * this->_internal_keys_size();
  for (const auto& msg : this->keys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 preamble_longs = 1;
  if (this->preamble_longs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_preamble_longs());
  }

  // uint32 serial_version = 2;
  if (this->serial_version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_serial_version());
  }

  // uint32 sketch_type = 3;
  if (this->sketch_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sketch_type());
  }

  // uint32 rf = 4;
  if (this->rf() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rf());
  }

  // uint32 lg_nom_size = 5;
  if (this->lg_nom_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lg_nom_size());
  }

  // uint32 lg_cur_size = 6;
  if (this->lg_cur_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lg_cur_size());
  }

  // uint32 flags_byte = 7;
  if (this->flags_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flags_byte());
  }

  // uint32 seed_hash = 8;
  if (this->seed_hash() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_seed_hash());
  }

  // double p = 10;
  if (!(this->p() <= 0 && this->p() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 theta = 11;
  if (this->theta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_theta());
  }

  // uint32 num_keys = 9;
  if (this->num_keys() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_num_keys());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThetaSketchDup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:datasketches_pb.ThetaSketchDup)
  GOOGLE_DCHECK_NE(&from, this);
  const ThetaSketchDup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThetaSketchDup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:datasketches_pb.ThetaSketchDup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:datasketches_pb.ThetaSketchDup)
    MergeFrom(*source);
  }
}

void ThetaSketchDup::MergeFrom(const ThetaSketchDup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:datasketches_pb.ThetaSketchDup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  if (from.preamble_longs() != 0) {
    _internal_set_preamble_longs(from._internal_preamble_longs());
  }
  if (from.serial_version() != 0) {
    _internal_set_serial_version(from._internal_serial_version());
  }
  if (from.sketch_type() != 0) {
    _internal_set_sketch_type(from._internal_sketch_type());
  }
  if (from.rf() != 0) {
    _internal_set_rf(from._internal_rf());
  }
  if (from.lg_nom_size() != 0) {
    _internal_set_lg_nom_size(from._internal_lg_nom_size());
  }
  if (from.lg_cur_size() != 0) {
    _internal_set_lg_cur_size(from._internal_lg_cur_size());
  }
  if (from.flags_byte() != 0) {
    _internal_set_flags_byte(from._internal_flags_byte());
  }
  if (from.seed_hash() != 0) {
    _internal_set_seed_hash(from._internal_seed_hash());
  }
  if (!(from.p() <= 0 && from.p() >= 0)) {
    _internal_set_p(from._internal_p());
  }
  if (from.theta() != 0) {
    _internal_set_theta(from._internal_theta());
  }
  if (from.num_keys() != 0) {
    _internal_set_num_keys(from._internal_num_keys());
  }
}

void ThetaSketchDup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:datasketches_pb.ThetaSketchDup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThetaSketchDup::CopyFrom(const ThetaSketchDup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:datasketches_pb.ThetaSketchDup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThetaSketchDup::IsInitialized() const {
  return true;
}

void ThetaSketchDup::InternalSwap(ThetaSketchDup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ThetaSketchDup, num_keys_)
      + sizeof(ThetaSketchDup::num_keys_)
      - PROTOBUF_FIELD_OFFSET(ThetaSketchDup, preamble_longs_)>(
          reinterpret_cast<char*>(&preamble_longs_),
          reinterpret_cast<char*>(&other->preamble_longs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ThetaSketchDup::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace datasketches_pb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::datasketches_pb::ThetaSketchDup_HashMapCount* Arena::CreateMaybeMessage< ::datasketches_pb::ThetaSketchDup_HashMapCount >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datasketches_pb::ThetaSketchDup_HashMapCount >(arena);
}
template<> PROTOBUF_NOINLINE ::datasketches_pb::ThetaSketchDup* Arena::CreateMaybeMessage< ::datasketches_pb::ThetaSketchDup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::datasketches_pb::ThetaSketchDup >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
